<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVASE</title>
    <url>/2022/01/26/JAVASE/</url>
    <content><![CDATA[<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ol>
<li>单行注释<br><code>// 注释的内容</code></li>
<li>多行注释<br><code>/* 注释的内容 */</code></li>
<li>文档注释<br><code>/** 注释的内容 */</code>，生成帮助文档的语法格式：javadoc -d 目录名 文件名.java，例如：javadoc -d doc Demo1Exam.java</li>
</ol>
<h4 id="JAVA变量命名规则"><a href="#JAVA变量命名规则" class="headerlink" title="JAVA变量命名规则"></a>JAVA变量命名规则</h4><ol>
<li>标识符命名规则<br>1）只能由字母，数字，下划线_，$组成<br>2）不能以数字开头<br>3）不能是java中的关键字<br>4）不能是字面值 true,false,null</li>
<li>规范<br>1）小驼峰，多个单词组成，第一个单词首字母小写，后边每个单词首字母大写<br>2）局部变量必须自己初始化之后才能使用</li>
</ol>
<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ol>
<li>整型：字节（Byte），短整型（Short），整型（Integer），长整型（Long）</li>
<li>浮点型：单精度（Float），双精度（Double）</li>
<li>字符型（char）</li>
<li>布尔型（boolean）</li>
</ol>
<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ol>
<li>字符串</li>
<li>数组</li>
<li>类</li>
<li>接口</li>
</ol>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ol>
<li>自动类型转换：低类型-&gt;高类型<br>1）byte  -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double<br>2）char(0-65535) -&gt; int -&gt; long -&gt; float -&gt; double</li>
<li>强制类型转换：高类型-&gt;低类型，强制转换符(类型）</li>
</ol>
<h4 id="算数运算符除法"><a href="#算数运算符除法" class="headerlink" title="算数运算符除法"></a>算数运算符除法</h4><ol>
<li>除数和被除数都是整数，结果取整<br>System.out.println(5 / 2);// 2<br>System.out.println(5.0 / 2);// 2.5<br>System.out.println(5 / 2.0);// 2.5<br>System.out.println(5.0 / 2.0);// 2.5</li>
<li>除数和被除数都是整数，除数不能为0<br>System.out.println(5 / 0 );// 引发异常ArithmeticException<br>System.out.println(5.0 / 0);// Infinity正无穷大<br>System.out.println(-5.0 / 0);// -Infinity<br>System.out.println(0.0 / 0);// NaN 非数字</li>
<li>结果的符号 取决去 被除数<br>System.out.println( 5 % 2 );// 1<br>System.out.println( 5.0 % 2 );// 1.0<br>System.out.println( 5 % -2 );// 1<br>System.out.println( -5 % 2 );// -1</li>
</ol>
<h4 id="n-和-n"><a href="#n-和-n" class="headerlink" title="n++和++n"></a>n++和++n</h4><ol>
<li>后缀<br>1）混合运算时候：先赋值运算，后自增或自减<br>2）输出语句中：先输出，后自增或自减</li>
<li>前缀<br>1）混合运算时候：先自增自减运算，后赋值<br>2）输出语句中：先自增或自减，后输出</li>
</ol>
<h4 id="amp-amp-和-amp-的区别"><a href="#amp-amp-和-amp-的区别" class="headerlink" title="&amp;&amp;||和&amp;|的区别"></a>&amp;&amp;||和&amp;|的区别</h4><ol>
<li>&amp;&amp;和||逻辑运算符（结果：boolean)，&amp;,|位运算符（二进制运算，boolean)</li>
<li>&amp;&amp;和||短路，&amp;和|非短路</li>
</ol>
<h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p>语法：表达式一？表达式二：表达式三</p>
<h4 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h4><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)&#123;</span><br><span class="line">   <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">            语句;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">            语句;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">            语句;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ol>
<li>while<br>语法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">   循环操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>do-while<br>语法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   循环操作</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件)</span><br></pre></td></tr></table></figure></li>
<li>for<br>语法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(参数初始化;条件判断;更新循环变量)&#123;</span><br><span class="line">   循环操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="格式化小数"><a href="#格式化小数" class="headerlink" title="格式化小数"></a>格式化小数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;00.00&quot;</span>);</span><br><span class="line">System.out.println(df.format(sum));<span class="comment">//02.18</span></span><br><span class="line">df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;##.##&quot;</span>);</span><br><span class="line">System.out.println(df.format(sum));<span class="comment">//2.18</span></span><br></pre></td></tr></table></figure>

<h4 id="java-util-Arrays类"><a href="#java-util-Arrays类" class="headerlink" title="java.util.Arrays类"></a>java.util.Arrays类</h4><ol>
<li>toString</li>
<li>Sort</li>
<li>binarySearch<br>存在返回 数据在数组中的位置，不存在返回 -插入点-1。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line">System.out.println(Arrays.binarySearch(arr, <span class="number">25</span>));-- -<span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li>equals</li>
<li>fill</li>
<li>copyOf</li>
</ol>
<h4 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h4><ol>
<li>成员变量在整个类中有效，局部变量只在定义他的方法内有效</li>
<li>成员变量系统自动赋默认值，局部变量需初始化</li>
<li>成员变量和局部变量同名，方法内优先使用局部变量</li>
</ol>
<h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>定义：在同一个类中，方法名相同，参数列表不同</p>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>饿汉式和懒汉式区别：</p>
<ol>
<li>饿汉式类加载的时候对象就已经创建了；<br>懒汉式类加载的时候对象没有创建，只有在应用的时候才会创建（getWindow());</li>
<li>饿汉式线程安全的;<br>懒汉式线程非安全<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 饿汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Window win = <span class="keyword">new</span> Window();</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Window</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> win;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Window win = <span class="keyword">null</span>;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Window</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(win == <span class="keyword">null</span>)</span><br><span class="line">         win = <span class="keyword">new</span> Window();</span><br><span class="line">      <span class="keyword">return</span> win;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMath</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      System.out.println(Math.ceil(<span class="number">55.78</span>));<span class="comment">// 56.0</span></span><br><span class="line">      System.out.println(Math.floor(<span class="number">55.78</span>));<span class="comment">// 55.0</span></span><br><span class="line">      System.out.println(Math.round(<span class="number">66.89</span>));<span class="comment">// 67</span></span><br><span class="line">      System.out.println(Math.pow(<span class="number">2</span>, <span class="number">3</span>));<span class="comment">// 8.0</span></span><br><span class="line">      System.out.println(Math.random());<span class="comment">//范围:[0.0,1.0)大于等于0.0&amp;&amp;小于1.0  </span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>规范：在子类的实例方法<br>     方法名相同<br>     参数列表相同<br>     返回值类型相同<br>     访问权限子类不能比父类更严格（低）<br>     异常范围不能比父类更大</p>
<h4 id="类和对象的区别"><a href="#类和对象的区别" class="headerlink" title="类和对象的区别"></a>类和对象的区别</h4><p>类是对象的抽象，对象是类的具体化<br>类是模版，同一个模版创建出来的对象具备共同的特征和行为<br>类是一种数据类型，引用数据类型；对象是具体的变量</p>
<h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><p>不同类必须创建对象new调用<br>同一个类中自定义方法之间可以直接调用，省去this<br>主方法调用其他自定义方法必须创建对象new调用</p>
<h4 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h4><p>作用域不同，成员变量在整个类中都有效，局部变量只在定义他的方法中有效<br>初始值不同，成员变量自动赋初始值，局部变量必须自己初始化<br>优先级不同，成员变量与局部变量重名，在局部变量的作用域内优先使用局部变量</p>
<h4 id="方法参数传参"><a href="#方法参数传参" class="headerlink" title="方法参数传参"></a>方法参数传参</h4><p>基本数据类型类型参数：是两个栈区，形参的修改不会影响实参<br>引用数据类型类型参数：两个引用类型名称指向同一个对象，形参的更改影响了实参。两个引用类型名称指向不同的对象，两个对象是两个独立的空间，一个对象的数据更改不会影响另一个对象</p>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归是程序调用自身的一种编程技术<br>特点：方法。反复调用本身。出口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethod</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		count ++;</span><br><span class="line">		<span class="keyword">if</span>(count == <span class="number">6</span>)</span><br><span class="line">			<span class="keyword">return</span>;<span class="comment">// 结束方法</span></span><br><span class="line">		System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">		f();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">// 5</span></span><br><span class="line">		<span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span>;<span class="comment">// 结束方法</span></span><br><span class="line">		System.out.println(n);<span class="comment">// 5,4,3,2,1</span></span><br><span class="line">		ff(n-<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fff</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">// 5</span></span><br><span class="line">		<span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span>;<span class="comment">// 结束方法</span></span><br><span class="line">		fff(n-<span class="number">1</span>);</span><br><span class="line">		System.out.println(n);<span class="comment">// 1,2,3,4,5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">// 5</span></span><br><span class="line">		<span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> n * fac(n-<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM常用命令</title>
    <url>/2022/01/28/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="vim介绍"><a href="#vim介绍" class="headerlink" title="vim介绍"></a>vim介绍</h4><p>vim是从vi发展出来的文本编辑器，是一个程序开发工具，vim官网：<a href="https://www.vim.org/%E3%80%82">https://www.vim.org/。</a></p>
<h4 id="vim键盘图"><a href="#vim键盘图" class="headerlink" title="vim键盘图"></a>vim键盘图</h4><p><img src="/2022/01/28/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/vi-vim-cheat-sheet-sch.gif" alt="vim键盘图"></p>
<h4 id="vim常用命令"><a href="#vim常用命令" class="headerlink" title="vim常用命令"></a>vim常用命令</h4><ol>
<li><p>移动光标<br>w：跳到下一个词首（按标点或单词分割）<br>W：跳到下一个词首（忽略标点）<br>e：跳到下一个词尾（按标点或单词分割）<br>E：跳到下一个词尾（忽略标点）<br>b：跳到上一个词首（按标点或单词分割）<br>B：跳到上一个词首（忽略标点）<br>0：跳到行首<br>^：跳到行首（第一个单词首）<br>$：跳到行尾<br>gg：跳到文首<br>G：跳到文尾<br>5gg(5G)：跳到第5行</p>
</li>
<li><p>删除复制<br>D：删除内容到行尾<br>yy：复制一行<br>P：粘贴内容到下一行<br>p：粘贴内容到上一行</p>
</li>
<li><p>插入模式<br>I：行首插入<br>o：下方新增行并插入<br>O：上方新增行并插入</p>
</li>
<li><p>编辑<br>J：将当前行和下一行连接<br>c$：删除光标到行尾内容，进入编辑模式<br>S：删除当前行，进入编辑模式<br>u：撤销</p>
</li>
<li><p>查找替换<br>/str：向后搜索str字符串<br>?str：向前搜索str字符串<br>“\c”：忽略大小写<br>“\C”：敏感大小写<br>n：下一个匹配<br>N：上一个匹配<br>%s/old/new/g：将整个文件old替换为new<br>%s/old/new/gc：将整个文件old替换为new（每次替换前提示）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
