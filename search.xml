<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVASE</title>
    <url>/2022/01/26/JAVASE/</url>
    <content><![CDATA[<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ol>
<li>单行注释<br><code>// 注释的内容</code></li>
<li>多行注释<br><code>/* 注释的内容 */</code></li>
<li>文档注释<br><code>/** 注释的内容 */</code>，生成帮助文档的语法格式：javadoc -d 目录名 文件名.java，例如：javadoc -d doc Demo1Exam.java</li>
</ol>
<h4 id="JAVA变量命名规则"><a href="#JAVA变量命名规则" class="headerlink" title="JAVA变量命名规则"></a>JAVA变量命名规则</h4><ol>
<li>标识符命名规则<br>1）只能由字母，数字，下划线_，$组成<br>2）不能以数字开头<br>3）不能是java中的关键字<br>4）不能是字面值 true,false,null</li>
<li>规范<br>1）小驼峰，多个单词组成，第一个单词首字母小写，后边每个单词首字母大写<br>2）局部变量必须自己初始化之后才能使用</li>
</ol>
<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ol>
<li>整型：字节（Byte），短整型（Short），整型（Integer），长整型（Long）</li>
<li>浮点型：单精度（Float），双精度（Double）</li>
<li>字符型（char）</li>
<li>布尔型（boolean）</li>
</ol>
<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ol>
<li>字符串</li>
<li>数组</li>
<li>类</li>
<li>接口</li>
</ol>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ol>
<li>自动类型转换：低类型-&gt;高类型<br>1）byte  -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double<br>2）char(0-65535) -&gt; int -&gt; long -&gt; float -&gt; double</li>
<li>强制类型转换：高类型-&gt;低类型，强制转换符(类型）</li>
</ol>
<h4 id="算数运算符除法"><a href="#算数运算符除法" class="headerlink" title="算数运算符除法"></a>算数运算符除法</h4><p>除数和被除数都是整数，结果取整</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> / <span class="number">2</span>);<span class="comment">// 2</span></span><br><span class="line">System.out.println(<span class="number">5.0</span> / <span class="number">2</span>);<span class="comment">// 2.5</span></span><br><span class="line">System.out.println(<span class="number">5</span> / <span class="number">2.0</span>);<span class="comment">// 2.5</span></span><br><span class="line">System.out.println(<span class="number">5.0</span> / <span class="number">2.0</span>);<span class="comment">// 2.5</span></span><br></pre></td></tr></table></figure>
<p>除数和被除数都是整数，除数不能为0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> / <span class="number">0</span> );<span class="comment">// 引发异常ArithmeticException</span></span><br><span class="line">System.out.println(<span class="number">5.0</span> / <span class="number">0</span>);<span class="comment">// Infinity正无穷大</span></span><br><span class="line">System.out.println(-<span class="number">5.0</span> / <span class="number">0</span>);<span class="comment">// -Infinity</span></span><br><span class="line">System.out.println(<span class="number">0.0</span> / <span class="number">0</span>);<span class="comment">// NaN 非数字</span></span><br></pre></td></tr></table></figure>
<p>结果的符号 取决去 被除数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println( <span class="number">5</span> % <span class="number">2</span> );<span class="comment">// 1</span></span><br><span class="line">System.out.println( <span class="number">5.0</span> % <span class="number">2</span> );<span class="comment">// 1.0</span></span><br><span class="line">System.out.println( <span class="number">5</span> % -<span class="number">2</span> );<span class="comment">// 1</span></span><br><span class="line">System.out.println( -<span class="number">5</span> % <span class="number">2</span> );<span class="comment">// -1</span></span><br></pre></td></tr></table></figure>
<h4 id="n-和-n"><a href="#n-和-n" class="headerlink" title="n++和++n"></a>n++和++n</h4><ol>
<li>后缀<br>1）混合运算时候：先赋值运算，后自增或自减<br>2）输出语句中：先输出，后自增或自减</li>
<li>前缀<br>1）混合运算时候：先自增自减运算，后赋值<br>2）输出语句中：先自增或自减，后输出</li>
</ol>
<h4 id="amp-amp-和-amp-的区别"><a href="#amp-amp-和-amp-的区别" class="headerlink" title="&amp;&amp;||和&amp;|的区别"></a>&amp;&amp;||和&amp;|的区别</h4><ol>
<li>&amp;&amp;和||逻辑运算符（结果：boolean)，&amp;,|位运算符（二进制运算，boolean)</li>
<li>&amp;&amp;和||短路，&amp;和|非短路</li>
</ol>
<h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p>语法：表达式一？表达式二：表达式三</p>
<h4 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h4><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)&#123;</span><br><span class="line">   <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">            语句;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">            语句;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">            语句;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>while<br>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">   循环操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>do-while<br>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   循环操作</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件)</span><br></pre></td></tr></table></figure>
<p>for<br>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(参数初始化;条件判断;更新循环变量)&#123;</span><br><span class="line">   循环操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="格式化小数"><a href="#格式化小数" class="headerlink" title="格式化小数"></a>格式化小数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;00.00&quot;</span>);</span><br><span class="line">System.out.println(df.format(sum));<span class="comment">//02.18</span></span><br><span class="line">df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;##.##&quot;</span>);</span><br><span class="line">System.out.println(df.format(sum));<span class="comment">//2.18</span></span><br></pre></td></tr></table></figure>

<h4 id="java-util-Arrays类"><a href="#java-util-Arrays类" class="headerlink" title="java.util.Arrays类"></a>java.util.Arrays类</h4><p>toString<br>Sort<br>binarySearch<br>   存在返回 数据在数组中的位置，不存在返回 -插入点-1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line">System.out.println(Arrays.binarySearch(arr, <span class="number">25</span>));-- -<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>equals<br>fill<br>copyOf</p>
<h4 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h4><ol>
<li>成员变量在整个类中有效，局部变量只在定义他的方法内有效</li>
<li>成员变量系统自动赋默认值，局部变量需初始化</li>
<li>成员变量和局部变量同名，方法内优先使用局部变量</li>
</ol>
<h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>定义：在同一个类中，方法名相同，参数列表不同</p>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>饿汉式和懒汉式区别：<br>饿汉式类加载的时候对象就已经创建了<br>懒汉式类加载的时候对象没有创建，只有在应用的时候才会创建（getWindow())<br>饿汉式线程安全的<br>懒汉式线程非安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 饿汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Window win = <span class="keyword">new</span> Window();</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Window</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> win;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Window win = <span class="keyword">null</span>;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Window</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(win == <span class="keyword">null</span>)</span><br><span class="line">         win = <span class="keyword">new</span> Window();</span><br><span class="line">      <span class="keyword">return</span> win;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMath</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      System.out.println(Math.ceil(<span class="number">55.78</span>));<span class="comment">// 56.0，向上取整</span></span><br><span class="line">      System.out.println(Math.floor(<span class="number">55.78</span>));<span class="comment">// 55.0，向下取整</span></span><br><span class="line">      System.out.println(Math.round(<span class="number">66.89</span>));<span class="comment">// 67，四舍五入</span></span><br><span class="line">      System.out.println(Math.pow(<span class="number">2</span>, <span class="number">3</span>));<span class="comment">// 8.0，2底3指数</span></span><br><span class="line">      System.out.println(Math.random());<span class="comment">//范围:[0.0,1.0)大于等于0.0&amp;&amp;小于1.0  </span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>规范：在子类的实例方法<br>     方法名相同<br>     参数列表相同<br>     返回值类型相同<br>     访问权限子类不能比父类更严格（低）<br>     异常范围不能比父类更大</p>
<h4 id="类和对象的区别"><a href="#类和对象的区别" class="headerlink" title="类和对象的区别"></a>类和对象的区别</h4><p>类是对象的抽象，对象是类的具体化<br>类是模版，同一个模版创建出来的对象具备共同的特征和行为<br>类是一种数据类型，引用数据类型；对象是具体的变量</p>
<h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><p>不同类必须创建对象new调用<br>同一个类中自定义方法之间可以直接调用，省去this<br>主方法调用其他自定义方法必须创建对象new调用</p>
<h4 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h4><p>作用域不同，成员变量在整个类中都有效，局部变量只在定义他的方法中有效<br>初始值不同，成员变量自动赋初始值，局部变量必须自己初始化<br>优先级不同，成员变量与局部变量重名，在局部变量的作用域内优先使用局部变量</p>
<h4 id="方法参数传参"><a href="#方法参数传参" class="headerlink" title="方法参数传参"></a>方法参数传参</h4><p>基本数据类型类型参数：是两个栈区，形参的修改不会影响实参<br>引用数据类型类型参数：两个引用类型名称指向同一个对象，形参的更改影响了实参。两个引用类型名称指向不同的对象，两个对象是两个独立的空间，一个对象的数据更改不会影响另一个对象</p>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归是程序调用自身的一种编程技术<br>特点：方法。反复调用本身。出口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethod</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		count ++;</span><br><span class="line">		<span class="keyword">if</span>(count == <span class="number">6</span>)</span><br><span class="line">			<span class="keyword">return</span>;<span class="comment">// 结束方法</span></span><br><span class="line">		System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">		f();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">// 5</span></span><br><span class="line">		<span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span>;<span class="comment">// 结束方法</span></span><br><span class="line">		System.out.println(n);<span class="comment">// 5,4,3,2,1</span></span><br><span class="line">		ff(n-<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fff</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">// 5</span></span><br><span class="line">		<span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span>;<span class="comment">// 结束方法</span></span><br><span class="line">		fff(n-<span class="number">1</span>);</span><br><span class="line">		System.out.println(n);<span class="comment">// 1,2,3,4,5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">// 5</span></span><br><span class="line">		<span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> n * fac(n-<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      TestMethod test = <span class="keyword">new</span> TestMethod();</span><br><span class="line">      System.out.println(test.fac(<span class="number">5</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>隐藏类的属性和实现细节，对外提供公共的访问方式访问<br>作用：数据的安全性。可以使用流程控制语句。用户只能用我们提供的公共访问方式来访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">65</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.age = age;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.age=<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> getAge&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Persion ps = <span class="keyword">new</span> Persion();</span><br><span class="line">      ps.setAge = <span class="number">30</span>;</span><br><span class="line">      System.out.println(ps.getAge);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重载-1"><a href="#重载-1" class="headerlink" title="重载"></a>重载</h4><p>在同一个类中，方法名相同，参数列表不同，与返回值无关。</p>
<h4 id="构造方法与普通方法的区别"><a href="#构造方法与普通方法的区别" class="headerlink" title="构造方法与普通方法的区别"></a>构造方法与普通方法的区别</h4><p>构造用来初始化对象，普通方法用来完成特定功能<br>构造只有在new创建对象的时候才能调用，普通方法用对象就可以调用（调用了执行，没调用就不执行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="comment">//默认构造：</span></span><br><span class="line">	<span class="comment">//Person()&#123;//代码&#125;</span></span><br><span class="line">	<span class="comment">// 显示定义的无参构造</span></span><br><span class="line"><span class="comment">//	public Person() &#123;</span></span><br><span class="line"><span class="comment">//		// 初始化：给 成员变量赋值</span></span><br><span class="line"><span class="comment">//		this.name = &quot;郭靖&quot;;</span></span><br><span class="line"><span class="comment">//		age = 18;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	public Person(String name,int age) &#123;</span></span><br><span class="line"><span class="comment">//		this.name = name;</span></span><br><span class="line"><span class="comment">//		this.age = age;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name + <span class="string">&quot;,&quot;</span> + age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPerson</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//调用 构造方法： Person();</span></span><br><span class="line">      <span class="comment">//Person guojing = new Person(&quot;郭靖&quot;,18);</span></span><br><span class="line">      <span class="comment">//System.out.println(guojing.show());// 郭靖,18</span></span><br><span class="line">      <span class="comment">//Person yangkang = new Person(&quot;杨康&quot;,19);</span></span><br><span class="line">      <span class="comment">//System.out.println(yangkang.show());// </span></span><br><span class="line">		<span class="comment">//访问器</span></span><br><span class="line">		Person guojing = <span class="keyword">new</span> Person();</span><br><span class="line">		guojing.setAge(<span class="number">18</span>);</span><br><span class="line">		guojing.setName(<span class="string">&quot;郭靖&quot;</span>);</span><br><span class="line">		System.out.println(guojing.show());<span class="comment">// null,0</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="成员变量初始化顺序"><a href="#成员变量初始化顺序" class="headerlink" title="成员变量初始化顺序"></a>成员变量初始化顺序</h4><p>默认初始化，声明初始化，构造块初始化，构造器初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">11</span>;<span class="comment">// 声明处</span></span><br><span class="line">	&#123;</span><br><span class="line">		n = <span class="number">22</span>;<span class="comment">// 构造块</span></span><br><span class="line">	&#125;</span><br><span class="line">	Demo()&#123;</span><br><span class="line">		n = <span class="number">33</span>;<span class="comment">// 构造器</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">		System.out.println(demo.n);<span class="comment">// 33</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态变量和实例变量的区别"><a href="#静态变量和实例变量的区别" class="headerlink" title="静态变量和实例变量的区别"></a>静态变量和实例变量的区别</h4><p>静态变量属于类，类加载的时候创建，类卸载的时候释放，存在方法区中<br>实例变量属于对象，对象创建的时候创建，对象销毁的时候销毁，存在堆中</p>
<h4 id="静态方法和实例方法的区别"><a href="#静态方法和实例方法的区别" class="headerlink" title="静态方法和实例方法的区别"></a>静态方法和实例方法的区别</h4><p>静态方法只能直接访问静态成员，不能使用this和super<br>实例方法可以直接访问静态成员和实例成员，可以用this和super</p>
<h4 id="static修饰代码块"><a href="#static修饰代码块" class="headerlink" title="static修饰代码块"></a>static修饰代码块</h4><p>静态块的作用：初始化类，类加载的时候自动执行（类加载：第一次主动使用某个类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态块-&gt;构造块-&gt;构造器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Demo1()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo1 demo1 = <span class="keyword">new</span> Demo1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法重写-1"><a href="#方法重写-1" class="headerlink" title="方法重写"></a>方法重写</h4><p>在子类中，实例方法，方法名相同，参数列表相同，返回值类型相同，访问权限子类不能比父类更严格，异常范围不能比父类大</p>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类不能创建对象<br>抽象方法可定义可不定义<br>子类必须重写抽象方法（抽象子类除外）<br>构造方法不能是抽象的<br>abstract不能与private,static,final一起使用</p>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口中的成员都是public。成员都是public，抽象方法public abstract，常量都是public static fial<br>接口是不能创建对象的<br>普通的实现类必须重写接口中的所有抽象方法（抽象实现类除外）<br>实现类可以实现多个接口的功能<br>接口之间可以继承，可以多继承</p>
<h4 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h4><ol>
<li>相同点：<br>1）都不能创建对象<br>2）都可以定义抽象方法<br>3）使用子类或者实现类实现功能<br>4）普通的子类和实现类必须重写实现抽下个父类和接口中的所有抽象方法（抽象的子类和实现类除外）</li>
<li>不同点：<br>接口:一组规则，同一个应用程序，接口用来降低耦合连接，不同的应用程序，接口是他们通信的桥梁<br>抽象类:是类的父类，继承存在高耦合。父类功能是子类必不可少的一部分。抽象父类可以充当模板的做用</li>
</ol>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>父类引用子类对象，接口引用实现类对象。子类独特的功能被屏蔽。更容易更换子类对象，用父类类型兼容所有的子类类型。</p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>用法：对象 instanceof 类或接口<br>该运算符用来判断一个对象是否属于一个类或者实现了一个接口，结果为true或false<br>在强制类型转换之前通过instanceof运算符检查对象的真实类型，可以避免类型转换异常，从而提高代码健壮性</p>
<h4 id="String-Api"><a href="#String-Api" class="headerlink" title="String Api"></a>String Api</h4><p>concat，在字符串末尾拼接一个字符串<br>length，获取字符串长度<br>equals，判断两个字符串的字符序列是否相等<br>equalsIgnoreCase，两个字符串的字符序列是否相等（不区分大小写）<br>toUpperCase，转大写<br>toLowerCase，转小写<br>indexOf，获得参数串在当前串中第一次出现的位置索引，不存在返回 -1<br>lastIndexOf，获得参数串在当前串中最后一次一次出现的位置索引，不存在返回 -1<br>charAt，获得参数位置的字符 char<br>substring，截取字符串，如果一个参数：从起始位置取到字符串末尾，如果两个参数：从起始位置截取到终止位置的前一位<br>trim，去除字符串的首位空格<br>replace，用第二个参数替换第一个参数的字符序列<br>endsWith，获得是否以指定参数串为结尾，是true<br>startsWith，获得是否以指定参数串为开头，是true<br>compareTo，比较字符串的大小，相等返回0，大于返回正数，小于返回负数<br>toCharArray，把字符串转成char[]<br>split，把字符串分割成字符串数组String[]<br>contains，参数串在当前串中是否包含，包含true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">		<span class="comment">// 1.在字符串末尾 拼接一个字符串</span></span><br><span class="line">		s = s.concat(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">		System.out.println(s);<span class="comment">// &quot;helloabc&quot;</span></span><br><span class="line">		<span class="comment">// 2.获取字符串的长度（字符的个数）</span></span><br><span class="line">		String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">		System.out.println(s1.length());<span class="comment">// 5</span></span><br><span class="line">		<span class="comment">// 3.两个字符串的字符序列是否相等（区分大小写）</span></span><br><span class="line">		System.out.println(<span class="string">&quot;hello&quot;</span>.equals(<span class="string">&quot;hello&quot;</span>));<span class="comment">// true</span></span><br><span class="line">		<span class="comment">// 4.两个字符串的字符序列是否相等（忽略区分大小写）</span></span><br><span class="line">		System.out.println(<span class="string">&quot;YEs&quot;</span>.equalsIgnoreCase(<span class="string">&quot;yes&quot;</span>));<span class="comment">// true</span></span><br><span class="line">		<span class="comment">// 5.转大写</span></span><br><span class="line">		System.out.println(<span class="string">&quot;YEs&quot;</span>.toUpperCase());<span class="comment">// YES</span></span><br><span class="line">		<span class="comment">// 6.转小写</span></span><br><span class="line">		System.out.println(<span class="string">&quot;YEs&quot;</span>.toLowerCase());<span class="comment">// yes</span></span><br><span class="line">		System.out.println(<span class="string">&quot;YEs&quot;</span>.toUpperCase().equals(<span class="string">&quot;yes&quot;</span>.toUpperCase()));<span class="comment">// true</span></span><br><span class="line">		<span class="comment">// 7.&quot;guojing@163.com&quot;,获得参数串在当前串中第一次出现的位置索引,不存在返回 -1</span></span><br><span class="line">		System.out.println(<span class="string">&quot;helloabhelloab&quot;</span>.indexOf(<span class="string">&quot;ab&quot;</span>));<span class="comment">// 5</span></span><br><span class="line">		System.out.println(<span class="string">&quot;helloabhelloab&quot;</span>.indexOf(<span class="string">&quot;abxyz&quot;</span>));<span class="comment">// -1</span></span><br><span class="line">		<span class="comment">// 8.获得参数串  在当前串中 最后一次一次出现的位置索引,不存在返回 -1</span></span><br><span class="line">		System.out.println(<span class="string">&quot;helloabhelloab&quot;</span>.lastIndexOf(<span class="string">&quot;ab&quot;</span>));<span class="comment">// 12</span></span><br><span class="line">		System.out.println(<span class="string">&quot;helloabhelloab&quot;</span>.lastIndexOf(<span class="string">&quot;abxyz&quot;</span>));<span class="comment">// -1</span></span><br><span class="line">		<span class="comment">// 9.superman.next().charAt(0),获得参数位置的字符char</span></span><br><span class="line">		System.out.println(<span class="string">&quot;hello&quot;</span>.charAt(<span class="number">1</span>));<span class="comment">// &#x27;e&#x27;</span></span><br><span class="line">		<span class="comment">// 10.从起始位置取到字符串末尾</span></span><br><span class="line">		System.out.println(<span class="string">&quot;hello&quot;</span>.substring(<span class="number">2</span>));<span class="comment">// &quot;llo&quot;</span></span><br><span class="line">		<span class="comment">// 11.从起始位置截取到终止位置的前一位</span></span><br><span class="line">		System.out.println(<span class="string">&quot;hello&quot;</span>.substring(<span class="number">2</span>, <span class="number">4</span>));<span class="comment">// &quot;ll&quot;</span></span><br><span class="line">		<span class="comment">// 12.去除字符串的首位空格</span></span><br><span class="line">		System.out.println(<span class="string">&quot;   he  l l o    &quot;</span>.trim());<span class="comment">// he  l l o</span></span><br><span class="line">		<span class="comment">// 13.用第二个参数 替换 第一个参数的字符序列。</span></span><br><span class="line">		System.out.println(<span class="string">&quot;helloabc&quot;</span>.replace(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;你好&quot;</span> ));<span class="comment">//你好abc</span></span><br><span class="line">      <span class="comment">// 14.&quot;Demo.java&quot;,获得是否以指定参数串  为 结尾，是true</span></span><br><span class="line">      System.out.println(<span class="string">&quot;demo.java&quot;</span>.endsWith(<span class="string">&quot;java&quot;</span>));<span class="comment">// true</span></span><br><span class="line">		<span class="comment">// 15 获得是否以指定参数串  为 开头，是true</span></span><br><span class="line">		System.out.println(<span class="string">&quot;demo.java&quot;</span>.startsWith(<span class="string">&quot;demo&quot;</span>));<span class="comment">// true</span></span><br><span class="line">		<span class="comment">// 16.比较字符串的大小：数据字典</span></span><br><span class="line">		System.out.println(<span class="string">&quot;ab&quot;</span>.compareTo(<span class="string">&quot;ab&quot;</span>));<span class="comment">// 0</span></span><br><span class="line">		System.out.println(<span class="string">&quot;abc&quot;</span>.compareTo(<span class="string">&quot;ab&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line">		System.out.println(<span class="string">&quot;ad&quot;</span>.compareTo(<span class="string">&quot;ab&quot;</span>)); <span class="comment">// 2</span></span><br><span class="line">		System.out.println(<span class="string">&quot;ab&quot;</span>.compareTo(<span class="string">&quot;ac&quot;</span>));<span class="comment">// -1</span></span><br><span class="line">		<span class="comment">// 17.把字符串转成char[]&quot;hello&quot;</span></span><br><span class="line">		<span class="keyword">char</span> [] crs = <span class="string">&quot;hello&quot;</span>.toCharArray();</span><br><span class="line">		System.out.println(Arrays.toString(crs));<span class="comment">// [h, e, l, l, o]</span></span><br><span class="line">		<span class="comment">// 18.把字符串分割成字符串数组 String [] </span></span><br><span class="line">		String [] strs = <span class="string">&quot;aa bb cc&quot;</span>.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		System.out.println(Arrays.toString(strs));<span class="comment">// [aa, bb, cc]</span></span><br><span class="line">		<span class="comment">// 19.参数串在当前串中是否包含，包含true</span></span><br><span class="line">		System.out.println(<span class="string">&quot;helloabchelllo&quot;</span>.contains(<span class="string">&quot;abc&quot;</span>));<span class="comment">// true	</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><h4 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h4><h4 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h4><h4 id="test-5"><a href="#test-5" class="headerlink" title="test"></a>test</h4><h4 id="test-6"><a href="#test-6" class="headerlink" title="test"></a>test</h4><h4 id="test-7"><a href="#test-7" class="headerlink" title="test"></a>test</h4><h4 id="test-8"><a href="#test-8" class="headerlink" title="test"></a>test</h4><h4 id="test-9"><a href="#test-9" class="headerlink" title="test"></a>test</h4><h4 id="test-10"><a href="#test-10" class="headerlink" title="test"></a>test</h4><h4 id="test-11"><a href="#test-11" class="headerlink" title="test"></a>test</h4><h4 id="test-12"><a href="#test-12" class="headerlink" title="test"></a>test</h4><h4 id="test-13"><a href="#test-13" class="headerlink" title="test"></a>test</h4><h4 id="test-14"><a href="#test-14" class="headerlink" title="test"></a>test</h4><h4 id="test-15"><a href="#test-15" class="headerlink" title="test"></a>test</h4><h4 id="test-16"><a href="#test-16" class="headerlink" title="test"></a>test</h4><h4 id="test-17"><a href="#test-17" class="headerlink" title="test"></a>test</h4><h4 id="test-18"><a href="#test-18" class="headerlink" title="test"></a>test</h4><h4 id="test-19"><a href="#test-19" class="headerlink" title="test"></a>test</h4><h4 id="test-20"><a href="#test-20" class="headerlink" title="test"></a>test</h4><h4 id="test-21"><a href="#test-21" class="headerlink" title="test"></a>test</h4><h4 id="test-22"><a href="#test-22" class="headerlink" title="test"></a>test</h4><h4 id="test-23"><a href="#test-23" class="headerlink" title="test"></a>test</h4><h4 id="test-24"><a href="#test-24" class="headerlink" title="test"></a>test</h4><h4 id="test-25"><a href="#test-25" class="headerlink" title="test"></a>test</h4><h4 id="test-26"><a href="#test-26" class="headerlink" title="test"></a>test</h4><h4 id="test-27"><a href="#test-27" class="headerlink" title="test"></a>test</h4>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM常用命令</title>
    <url>/2022/01/28/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="vim介绍"><a href="#vim介绍" class="headerlink" title="vim介绍"></a>vim介绍</h4><p>vim是从vi发展出来的文本编辑器，是一个程序开发工具，vim官网：<a href="https://www.vim.org/%E3%80%82">https://www.vim.org/。</a></p>
<h4 id="vim键盘图"><a href="#vim键盘图" class="headerlink" title="vim键盘图"></a>vim键盘图</h4><p><img src="/2022/01/28/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/vi-vim-cheat-sheet-sch.gif" alt="vim键盘图"></p>
<h4 id="vim常用命令"><a href="#vim常用命令" class="headerlink" title="vim常用命令"></a>vim常用命令</h4><ol>
<li><p>移动光标<br>w：跳到下一个词首（按标点或单词分割）<br>W：跳到下一个词首（忽略标点）<br>e：跳到下一个词尾（按标点或单词分割）<br>E：跳到下一个词尾（忽略标点）<br>b：跳到上一个词首（按标点或单词分割）<br>B：跳到上一个词首（忽略标点）<br>0：跳到行首<br>^：跳到行首（第一个单词首）<br>$：跳到行尾<br>gg：跳到文首<br>G：跳到文尾<br>5gg(5G)：跳到第5行</p>
</li>
<li><p>删除复制<br>D：删除内容到行尾<br>yy：复制一行<br>P：粘贴内容到下一行<br>p：粘贴内容到上一行</p>
</li>
<li><p>插入模式<br>I：行首插入<br>o：下方新增行并插入<br>O：上方新增行并插入</p>
</li>
<li><p>编辑<br>J：将当前行和下一行连接<br>c$：删除光标到行尾内容，进入编辑模式<br>S：删除当前行，进入编辑模式<br>u：撤销</p>
</li>
<li><p>查找替换<br>/str：向后搜索str字符串<br>?str：向前搜索str字符串<br>“\c”：忽略大小写<br>“\C”：敏感大小写<br>n：下一个匹配<br>N：上一个匹配<br>%s/old/new/g：将整个文件old替换为new<br>%s/old/new/gc：将整个文件old替换为new（每次替换前提示）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
